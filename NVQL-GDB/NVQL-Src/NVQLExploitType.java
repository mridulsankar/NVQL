import java.sql.*;
import java.util.ArrayList;

public class NVQLExploitType {

    static Boolean DEBUG = true;

    static String PreCondDisp(ArrayList<String> precond) {
        String precondsyn = "";
        for (int i = 0; i < precond.size(); i++) {

            if (i >= 1)
                precondsyn = precondsyn + ", " + precond.get(i);
            else
                precondsyn = precondsyn + precond.get(i);
        }
        return precondsyn;
    }

    static String PostCondDisp(ArrayList<String> postcond) {
        String postcondsyn = "";
        for (int i = 0; i < postcond.size(); i++) {

            if (i >= 1)
                postcondsyn = postcondsyn + ", " + postcond.get(i);
            else
                postcondsyn = postcondsyn + postcond.get(i);
        }
        return postcondsyn;
    }

    static Boolean existsExploitType(String expTypeName, Connection pgsqlCon) throws Exception {
        String query;
        Boolean exists = false;

        try {

            query = "MATCH (n: `EXPLOIT_TYPE_DEF` : `" + expTypeName
                    + "`) RETURN CASE WHEN (COUNT(n) = 0) THEN \"f\" ELSE \"t\" END as n";
            
            
            PreparedStatement statement = pgsqlCon.prepareStatement(query);
            ResultSet result = statement.executeQuery();
            result.next();
            
            if(DEBUG)
                System.out.println("@" + query);

            if (result.getString(1).equals("t"))
                exists = true;
        } catch (Exception e) {
            System.out.println("NVQLExploitTypeDef: Cypher Query Failed");
            System.out.println(e);
            System.exit(0);
        }
        return (exists);
    }

    static int existsExploitTypeSecCondPosition(String expTypeName, String PreorPost, String SecCondTypeName,
            Connection pgsqlCon) throws Exception {
        String query, decision = "";
        int exists = -1, ctr = 0;

        try {
            
            if (PreorPost.equalsIgnoreCase("Precond"))
                decision = "PreCond";
            else if (PreorPost.equalsIgnoreCase("Postcond"))
                decision = "PostCond";
            query = "MATCH (n: `EXPLOIT_TYPE_DEF`: `" + expTypeName + "`) RETURN (n.`" + decision + "List`)";

            // System.out.println("^^^" + query);
            PreparedStatement statement = pgsqlCon.prepareStatement(query);
            ResultSet result = statement.executeQuery();
            result.next();
            // System.out.println("@" + query);
            // System.out.println("$$" + result.getString(1) + "$$");

            String[] parts = result.getString(1).replace(" ", "").split(",");
            for (String part : parts) {
                // System.out.println("%%" + part.substring(0, part.indexOf("(")));
                if (part.substring(0, part.indexOf("(")).equals(SecCondTypeName)) {
                    exists = ctr;
                    break;
                }
                ctr++;
            }

        } catch (Exception e) {
            System.out.println("NVQLExploitType.existsExploitTypeSecCondPosition: Cypher Query Failed");
            System.out.println(e);
            System.exit(0);
        }
        return (exists);
    }

    static String corresSecCondAttrVal(String expTypeName, String PreorPostAttrValList, int pos, Connection pgsqlCon)
            throws Exception {
        String query = "";
        String attrval = "";
        int ctr = 0;

        try {

            if (PreorPostAttrValList.equalsIgnoreCase("Precond_Attr_Val_List"))
                query = "MATCH (n: `EXPLOIT_TYPE_DEF`: `" + expTypeName + "`) RETURN (n.PreCondList)";
            else if (PreorPostAttrValList.equalsIgnoreCase("Postcond_Attr_Val_List"))
                query = "MATCH (n: `EXPLOIT_TYPE_DEF`: `" + expTypeName + "`) RETURN (n.PostCondList)";

            // System.out.println(query);
            PreparedStatement statement = pgsqlCon.prepareStatement(query);
            ResultSet result = statement.executeQuery();
            result.next();
            if(DEBUG)
                System.out.println("@" + query);
            // System.out.println("##" + result.getString(1) + "##");
            String[] parts = result.getString(1).substring(0, result.getString(1).length()).replace(" ", "").split(",");
            // System.out.println("&&&& " + parts.toString());
            for (String part : parts) {
                // System.out.println("~~~~" + part);
                if (ctr == pos) {
                    attrval = part;
                    break;
                }
                ctr++;
            }
            // System.out.println("%%%" + ctr);
        } catch (Exception e) {
            System.out.println("NVQLExploitType.corresSecCondAttrVal: Cypher Query Failed");
            System.out.println(e);
            System.exit(0);
        }
        return (attrval);
    }

    static void createExploitType(String expTypeName, String attrDefList, ArrayList<String> preCond,
            ArrayList<String> postCond, String cveid, Connection pgsqlCon) {

        try {
            if (!existsExploitType(expTypeName, pgsqlCon))
                beginExploitType(expTypeName, attrDefList, preCond, postCond, cveid, pgsqlCon);
            else {
                System.out.println("ERROR.NVQLExploitType: Exploit-Type <" + expTypeName + "> already exists");
                System.exit(0);
            }
        }

        catch (Exception e) {
            System.out.println("NVQLExploitType: Neo4j Error");
            System.out.println(e);
            System.exit(0);
        }
    }

    public static String getAttrDefList(String expTypeName, Connection pgsqlCon) throws Exception {

        if (!existsExploitType(expTypeName, pgsqlCon)) {
            System.out.println("ERROR.NVQLExploitType: Exploit type <" + expTypeName + "> is not defined");
            System.exit(0);
            return null;
        }

        String query = "MATCH (n: `EXPLOIT_TYPE_DEF`: `" + expTypeName
                + "`) RETURN apoc.map.removeKeys(n,['_id', 'PreCondList', 'PostCondList', '_labels']) As props";
        
        if(DEBUG)
            System.out.println("@" + query);

        PreparedStatement statement1 = pgsqlCon.prepareStatement(query);
        ResultSet result1 = statement1.executeQuery();

        result1.next();
        // System.out.println("@" + query);
        // System.out.println(result1.getObject(1).toString());

        return (result1.getObject(1).toString());
    }

    static void beginExploitType(String expTypeName, String attrDefList, ArrayList<String> preCond,
            ArrayList<String> postCond, String cveid, Connection pgsqlCon) {
        try {
            String SecCondTypeName, SecCondAttrVal, datalist = "";
            String PreSecCondTypeNameList = "", PreSecCondAttrValList = "", PostSecCondTypeNameList = "",
                    PostSecCondAttrValList = "", seperatorop = "";
            ArrayList<String> preCondNames = new ArrayList<>();
            ArrayList<String> postCondNames = new ArrayList<>();
            ArrayList<String> preCondId = new ArrayList<>();
            ArrayList<String> postCondId = new ArrayList<>();
            // System.out.println("@@");
            for (int i = 0; i < preCond.size(); i++) {
                SecCondTypeName = "";
                SecCondAttrVal = "";
                if (i >= 1)
                    seperatorop = ", ";
                else
                    seperatorop = "";

                if (preCond.get(i).indexOf("(") > 0) {
                    SecCondTypeName = preCond.get(i).substring(0, preCond.get(i).indexOf("("));
                    SecCondAttrVal = preCond.get(i).substring(preCond.get(i).indexOf("(") + 1,
                            preCond.get(i).indexOf(")"));
                } else {
                    SecCondTypeName = preCond.get(i).substring(0);
                    SecCondAttrVal = "";
                }
                PreSecCondTypeNameList = PreSecCondTypeNameList + seperatorop + SecCondTypeName;
                // System.out.println("************" + SecCondTypeName);
                if (!NVQLSecCondType.existsSecCondType(SecCondTypeName, pgsqlCon)) {
                    System.out.println("ERROR.NVQLExploitType: Pre-Condition Security Condition type <"
                            + SecCondTypeName + "> is not defined");
                    System.exit(0);
                    return;
                }
                // System.out.println("@@");
                NVQLAttrValList aValList = null;
                NVQLAttrDefList aDefList = null;

                datalist = NVQLSecCondType.getAttrDefList(SecCondTypeName, pgsqlCon);
                datalist = datalist.substring(1, datalist.length() - 1).replace('=', ':');
                // System.out.println("$$" + datalist);
                if (!SecCondAttrVal.isEmpty()) {
                    // System.out.println("@@secindatttrval" + SecCondAttrVal);
                    aDefList = new NVQLAttrDefList(datalist);
                    // System.out.println("##datalist" + datalist);
                    // System.out.println("##adeflist" + aDefList);
                    aValList = new NVQLAttrValList(SecCondAttrVal);
                    // System.out.println("@@secondattrval" + SecCondAttrVal);
                    // System.out.println("@@avallist" + aValList);

                    for (String attr : aValList.getAttrList()) {
                        if (!aDefList.existsAttr(attr)) {
                            System.out.println("ERROR.NVQLExploitType: Undefined attribute <" + attr + ">");
                            System.exit(0);
                            return;
                        }
                    }
                    PreSecCondAttrValList = PreSecCondAttrValList + seperatorop + "(" + SecCondAttrVal + ")";
                } else
                    PreSecCondAttrValList = PreSecCondAttrValList + seperatorop + "()";
                // System.out.println("@@@");
            }

            for (int i = 0; i < postCond.size(); i++) {
                SecCondTypeName = "";
                SecCondAttrVal = "";

                if (i >= 1)
                    seperatorop = ", ";
                else
                    seperatorop = "";

                if (postCond.get(i).indexOf("(") > 0) {
                    SecCondTypeName = postCond.get(i).substring(0, postCond.get(i).indexOf("("));
                    SecCondAttrVal = postCond.get(i).substring(postCond.get(i).indexOf("(") + 1,
                            postCond.get(i).indexOf(")"));
                } else {
                    SecCondTypeName = postCond.get(i).substring(0);
                    SecCondAttrVal = "";
                }
                PostSecCondTypeNameList = PostSecCondTypeNameList + seperatorop + SecCondTypeName;

                if (!NVQLSecCondType.existsSecCondType(SecCondTypeName, pgsqlCon)) {
                    System.out.println("ERROR.NVQLExploitType: Post-Condition Security Condition type <"
                            + SecCondTypeName + "> is not defined");
                    System.exit(0);
                    return;
                }
                NVQLAttrValList aValList = null;
                NVQLAttrDefList aDefList = null;
                // System.out.println("^^");
                datalist = NVQLSecCondType.getAttrDefList(SecCondTypeName, pgsqlCon);
                datalist = datalist.substring(1, datalist.length() - 1).replace('=', ':');
                // System.out.println("%%" + datalist);
                if (!SecCondAttrVal.isEmpty()) {
                    aDefList = new NVQLAttrDefList(datalist);
                    aValList = new NVQLAttrValList(SecCondAttrVal);
                    for (String attr : aValList.getAttrList()) {
                        if (!aDefList.existsAttr(attr)) {
                            System.out.println("ERROR.NVQLExploitType: Undefined attribute <" + attr + ">");
                            System.exit(0);
                            return;
                        }
                    }
                    PostSecCondAttrValList = PostSecCondAttrValList + seperatorop + "(" + SecCondAttrVal + ")";
                } else
                    PostSecCondAttrValList = PostSecCondAttrValList + seperatorop + "()";
            }

            // System.out.println("##&&" + PreSecCondTypeNameList);
            String PreSecCondTypeNameList_Modified = PreSecCondTypeNameList.replaceAll(" ", "") + ",";
            int beg = 0, ctr = 0;
            for (int ch = 0; ch < PreSecCondTypeNameList_Modified.length(); ch++) {
                if (PreSecCondTypeNameList_Modified.charAt(ch) == ',') {
                    // preCondNames.add
                    // System.out.println("(n" + ctr + ": `SECURITY_CONDITION_TYPE_DEF` : `"
                    // + PreSecCondTypeNameList_Modified.substring(beg, ch) + "`)" + "(n" + ctr +
                    // ")");

                    preCondNames.add("(n" + ctr + ": `SECURITY_CONDITION_TYPE_DEF` : `"
                            + PreSecCondTypeNameList_Modified.substring(beg, ch) + "`)");
                    preCondId.add("(n" + ctr + ")");
                    beg = ch + 1;
                    ctr++;
                }
            }

            // System.out.println("@@&&" + PostSecCondTypeNameList);
            String PostSecCondTypeNameList_Modified = PostSecCondTypeNameList.replaceAll(" ", "") + ",";
            beg = 0;
            for (int ch = 0; ch < PostSecCondTypeNameList_Modified.length(); ch++) {
                if (PostSecCondTypeNameList_Modified.charAt(ch) == ',') {

                    // System.out.println("(n" + ctr + ": `SECURITY_CONDITION_TYPE_DEF` : `"
                    // + PostSecCondTypeNameList_Modified.substring(beg, ch) + "`)" + "(n" + ctr +
                    // ")");
                    postCondNames.add("(n" + ctr + ": `SECURITY_CONDITION_TYPE_DEF` : `"
                            + PostSecCondTypeNameList_Modified.substring(beg, ch) + "`)");
                    postCondId.add("(n" + ctr + ")");
                    beg = ch + 1;
                    ctr++;
                }
            }

            // System.out.println("$$&&" + PostSecCondAttrValList);
            // System.out.println("^^&&" + PreSecCondAttrValList);

            // String query = "INSERT INTO \"EXPLOIT_TYPE_DEF\" (\"Exploit_Type_Name\",
            // \"Exploit_Type_Attr_Def_List\", \"Precond\", \"Precond_Attr_Val_List\",
            // \"Postcond_Attr_Val_List\" , \"Postcond\" ) VALUES ('"
            // + expTypeName + "','" + attrDefList + "','" + PreSecCondTypeNameList + "','"
            // + PreSecCondAttrValList.replace("$", "").replace("#", "") + "','" +
            // PostSecCondTypeNameList + "','"
            // + PostSecCondAttrValList.replace("$", "").replace("#", "") + "')";

            /*
             * MATCH (n: `ENTITY_TYPE_DEF` : `privilege`) -
             * [:`RELATION_TYPE_DEF:atHost`]->(n0:ENTITY_TYPE_DEF:`host`),(n:
             * `ENTITY_TYPE_DEF` : `privilege`) -
             * [:`RELATION_TYPE_DEF:atHost`]->(n1:ENTITY_TYPE_DEF:`gateway`) REMOVE
             * n:ENTITY_TYPE_DEF:privilege SET n:SECURITY_CONDITION_TYPE_DEF:privilege, n =
             * {`privilege_id`:"integer", `Entity_Relation_List`:
             * "atHost{host,gateway}",`name`:"string", `since`:"time", `privType`:"string"}
             * 
             * 
             * 
             * MATCH (n : `reachability` {name:"httpd31", rchType:"xyz"}) MATCH (n0:`host`)
             * where n0.ipAddr = "192.168.148.3" MATCH (n1:`service`) where n1.name="httpd1"
             * CREATE (n)-[:`RELATION_TYPE_DEF:accessBy`]->(n0) CREATE
             * (n)-[:`RELATION_TYPE_DEF:accessTo`] ->(n1) RETURN n;
             * 
             */
            /*
             * working ============================================== ===== create (n:
             * `bofExploit`: `CVE_ID(s):CVE-2008-0106`{ name:'string', category:'string',
             * PreCondList: 'privilege($privType$:#"user"#)reachability($rchType$:#"xyz"#),
             * reachability($rchType$:#"xyz"#)', PostCondList: ''})
             * 
             */
            // System.out.println("##" + attrDefList + "##");
            attrDefList = attrDefList.replace(":", "`:\"").replace(", ", "\", `");
            // System.out.println("##" + attrDefList + "##");

            String create_query = "(n: `EXPLOIT_TYPE_DEF`: `" + expTypeName + "`: `CVE_ID(s):"
                    + cveid.replaceAll("\"", "") + "`";
            if (!attrDefList.isEmpty())
                create_query = create_query + "{ `" + attrDefList + "\", `PreCondList`: '";
            else
                create_query = create_query + "{ `PreCondList`: '";

            for (int loop = 0; loop < preCond.size(); loop++) {
                if (loop > 0)
                    create_query = create_query + ", " + preCond.get(loop);
                else
                    create_query = create_query + preCond.get(loop);

            }

            create_query = create_query + "', `PostCondList`: '";

            for (int loop = 0; loop < postCond.size(); loop++) {
                if (loop > 0)
                    create_query = create_query + ", " + postCond.get(loop);
                else
                    create_query = create_query + postCond.get(loop);

            }

            create_query = create_query + "'})";

            // System.out.println("\n-->>" + create_query);
            String query = "CREATE " + create_query;
            // String query = "INSERT INTO \"EXPLOIT_TYPE_DEF\" (\"Exploit_Type_Name\",
            // \"CveId(s)\", \"Exploit_Type_Attr_Def_List\", \"Precond\",
            // \"Precond_Attr_Val_List\", \"Postcond\" , \"Postcond_Attr_Val_List\" ) VALUES
            // ('"
            // + expTypeName + "','" + cveid + "','" + attrDefList + "','" +
            // PreSecCondTypeNameList + "','"
            // + PreSecCondAttrValList + "','" + PostSecCondTypeNameList + "','" +
            // PostSecCondAttrValList + "')";

            // System.out.println(query);
            PreparedStatement posted = pgsqlCon.prepareStatement(query);
            posted.executeUpdate();
            if(DEBUG)
                System.out.println("@" + query);
            System.out.println("1 node added Values: [(" + expTypeName + ") , (" + cveid + ") , (" + attrDefList
                    + ")] inserted in Table 'EXPLOIT_TYPE_DEF'");

            NVQLAttrDefList adlObject = new NVQLAttrDefList(attrDefList);
            String quelist = adlObject.convertADL4SQL();
            // System.out.println(quelist);
            /*
             * if (quelist != "") query = "CREATE TABLE \"" + expTypeName + "\" (\"" +
             * expTypeName + "_Id\" SERIAL, " + quelist +
             * ", \"Precond_List\" TEXT, \"Postcond_List\" TEXT)"; else query =
             * "CREATE TABLE \"" + expTypeName + "\" (\"" + expTypeName +
             * "_Id\" SERIAL, \"Precond_List\" TEXT, \"Postcond_List\" TEXT)";
             * 
             * MATCH (n : `reachability` {name:"httpd31", rchType:"xyz"}) MATCH (n0:`host`)
             * where n0.ipAddr = "192.168.148.3" MATCH (n1:`service`) where n1.name="httpd1"
             * CREATE (n)-[:`RELATION_TYPE_DEF:accessBy`]->(n0) CREATE
             * (n)-[:`RELATION_TYPE_DEF:accessTo`] ->(n1) RETURN n;
             * 
             */
            query = "MATCH " + create_query + " ";
            for (int preloop = 0; preloop < preCondNames.size(); preloop++) {
                query = query + "MATCH " + preCondNames.get(preloop) + " ";
                // System.out.println("@" + query);
            }
            for (int postloop = 0; postloop < postCondNames.size(); postloop++) {
                query = query + "MATCH " + postCondNames.get(postloop) + " ";
                // System.out.println("@" + query);
            }
            for (int preloop = 0; preloop < preCondNames.size(); preloop++) {
                query = query + "CREATE (n)<-[:`PRECOND`]-" + preCondId.get(preloop) + " ";
                // System.out.println("@" + query);
            }
            for (int postloop = 0; postloop < postCondNames.size(); postloop++) {
                query = query + "CREATE (n)-[:`POSTCOND`]->" + postCondId.get(postloop) + " ";
                // System.out.println("@" + query);
            }
            query = query + "RETURN (n)";
            posted = pgsqlCon.prepareStatement(query);
            posted.executeUpdate();
            if(DEBUG)
                System.out.println("@" + query);
            System.out.println("Preconditions and Postconditions Relationships of ['" + expTypeName
                    + "'] have been established successfully");

        } catch (Exception e) {
            System.out.println("NVQLExploitType: Neo4j Error");
            System.out.println(e);
            System.exit(0);
        }

    }

}
/*
 * MATCH(n:`EXPLOIT_TYPE_DEF`:`bofExploit`:`CVE_ID(s):CVE-2008-0106`{`name`:
 * "string",`category`:"string",`PreCondList`:'privilege($privType$:#"user"#),
 * reachability($rchType$:#"xyz"#)', `PostCondList`:
 * 'privilege($privType$:#"user"#)'})MATCH(n0:`SECURITY_CONDITION_TYPE_DEF`:`
 * privilege`)MATCH(n1:`SECURITY_CONDITION_TYPE_DEF`:`reachability`)MATCH(n2:`
 * SECURITY_CONDITION_TYPE_DEF`:`privilege`)CREATE(n)<-[:`PRECOND`]-(n0)CREATE(n
 * )<-[:`PRECOND`]-(n1)CREATE(n)-[:`POSTCOND`]->(n2)RETURN(n)
 */