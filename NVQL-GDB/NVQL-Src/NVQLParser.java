/* NVQLParser.java */
/* Generated By:JavaCC: Do not edit this line. NVQLParser.java */
//import statements

import java.io.*;
import java.net.*;
import java.nio.*;
import java.sql.*;
import java.util.*;
import java.lang.*;
import javafx.util.Pair;
import java.util.Properties;


/*===================================================================*/
/*                                                                   */
/*                                                                   */
/*===================================================================*/

class NVQLParser implements NVQLParserConstants {

        Connection con=null;
        long startTime, endTime;
        String propFileName = "./Resources/config.properties";
        String neo4jPort="", neo4jPassword = "", neo4jIpAddress="", neo4jUserName = "";
{

      NVQLReadPropertiesFileTest readProperties = new NVQLReadPropertiesFileTest();
      try
      {
        Properties prop = readProperties.readPropertiesFile(propFileName);
        neo4jPort=prop.getProperty("neo4jPort");
        neo4jPassword=prop.getProperty("neo4jPassword");
        neo4jIpAddress=prop.getProperty("neo4jIpAddress");
        neo4jUserName=prop.getProperty("neo4jUserName");
        System.out.println("Reading values from config.properites...");
      }
      catch (IOException ex)
      {
        System.out.println(ex.getMessage());
        ex.printStackTrace();
      }

}

        NVQLInitNeo4jDB t = new NVQLInitNeo4jDB(neo4jIpAddress, neo4jPort, "", neo4jUserName, neo4jPassword);
        NVQLQueryExecTime timeobj = new NVQLQueryExecTime();//processing time calculation 

        {
                System.out.println("Starting...");
                try{
                        con = t.getConnection();
                        t.createDefStores();
                        initParser();
                }
                catch(Exception e){
                        //System.out.println("Syntax check failed: "+e);

                }
        }

/*===================================================================*/
/*                                                                   */
/*                                                                   */
/*===================================================================*/
  final public 
void initParser() throws ParseException, Exception {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ETDCMD:
      case RTDCMD:
      case SCDCMD:
      case EXDCMD:
      case UCDCMD:
      case CCDCMD:
      case CECMD:
      case CRCMD:
      case CSECCMD:
      case CEXPCMD:
      case SELECT:
      case DELETE:
      case DROP:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ETDCMD:{
        parseEntityTypeDefQuery();
        break;
        }
      case CECMD:{
        parseCreateEntityQuery();
        break;
        }
      case RTDCMD:{
        parseRelationTypeDefQuery();
        break;
        }
      case CRCMD:{
        parseCreateRelationQuery();
        break;
        }
      case UCDCMD:{
        parseUCDefQuery();
        break;
        }
      case CCDCMD:{
        parseCCDefQuery();
        break;
        }
      case DROP:{
        parseDropQuery();
        break;
        }
      case DELETE:{
        parseDeleteQuery();
        break;
        }
      case SELECT:{
        parseSelectQuery();
        break;
        }
      case SCDCMD:{
        parseSecCondDefQuery();
        break;
        }
      case EXDCMD:{
        parseExpDefQuery();
        break;
        }
      case CSECCMD:{
        parseSecCondCreateQuery();
        break;
        }
      case CEXPCMD:{
        parseExpQuery();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  final public Token numOfEntity() throws ParseException {Token num;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      num = jj_consume_token(NUMBER);
      break;
      }
    case N:{
      num = jj_consume_token(N);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return num;}
    throw new Error("Missing return statement in function");
  }

  final public String parseEntityTypeName() throws ParseException {Token etname;
    etname = jj_consume_token(ID);
{if ("" != null) return etname.image;}
    throw new Error("Missing return statement in function");
  }

  final public String parseSecCondTypeName() throws ParseException {Token scname;
    scname = jj_consume_token(ID);
{if ("" != null) return scname.image;}
    throw new Error("Missing return statement in function");
  }

  final public String parseExploitTypeName() throws ParseException {Token expTypeName;
    expTypeName = jj_consume_token(ID);
{if ("" != null) return expTypeName.image;}
    throw new Error("Missing return statement in function");
  }

  final public String parseEntityTypeNameList() throws ParseException {Token etname = null;
        String etnameList = "";
    etname = jj_consume_token(ID);
etnameList = etnameList + etname.image;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      etname = jj_consume_token(ID);
etnameList = etnameList + "," + etname.image;
    }
etnameList = etnameList;
        {if ("" != null) return etnameList;}
    throw new Error("Missing return statement in function");
  }

  final public String parseRelationTypeName() throws ParseException {Token rtname;
    rtname = jj_consume_token(ID);
{if ("" != null) return rtname.image;}
    throw new Error("Missing return statement in function");
  }

  final public String parseEntityVar() throws ParseException {Token eVar;
    eVar = jj_consume_token(ID);
{if ("" != null) return eVar.image;}
    throw new Error("Missing return statement in function");
  }

  final public String parseRelationVar() throws ParseException {Token rVar;
    rVar = jj_consume_token(ID);
{if ("" != null) return rVar.image;}
    throw new Error("Missing return statement in function");
  }

  final public String parseAttrName() throws ParseException {Token aName;
    aName = jj_consume_token(ID);
{if ("" != null) return aName.image;}
    throw new Error("Missing return statement in function");
  }

  final public String parseAttrDef() throws ParseException {String aName;
        Token aValDomain;
    aName = parseAttrName();
    jj_consume_token(COLON);
    aValDomain = jj_consume_token(DATATYPE);
{if ("" != null) return (aName + ":" + aValDomain.image);}
    throw new Error("Missing return statement in function");
  }

  final public String parseAttrVal() throws ParseException {String aName="";
        Token aVal;
    aName = parseAttrName();
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QUOTED_STRING:{
      aVal = jj_consume_token(QUOTED_STRING);
{if ("" != null) return ("$"+aName + "$:#" + aVal.image+"#");}
      break;
      }
    case NUMBER:{
      aVal = jj_consume_token(NUMBER);
{if ("" != null) return ("$"+aName + "$:#" + aVal.image+"#");}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String parseAttrDefList() throws ParseException {String aDef;
        String aDefList = "";
    aDef = parseAttrDef();
aDefList = aDefList + aDef;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      aDef = parseAttrDef();
aDefList = aDefList + ", " + aDef;
    }
aDefList = aDefList; {if ("" != null) return aDefList;}
    throw new Error("Missing return statement in function");
  }

  final public String parseAttrValList() throws ParseException {String attrVal;
        String attrValList = "";
    attrVal = parseAttrVal();
attrValList = attrValList + attrVal;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      attrVal = parseAttrVal();
attrValList = attrValList + ", " + attrVal;
    }
attrValList = attrValList; {if ("" != null) return attrValList;}
    throw new Error("Missing return statement in function");
  }

  final public String parseIdList() throws ParseException {Token idName;
        String idNameList = "";
    idName = jj_consume_token(ID);
idNameList = idNameList + idName.image;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      idName = jj_consume_token(ID);
idNameList = idNameList + "," + idName.image;
    }
idNameList = idNameList ; {if ("" != null) return idNameList;}
    throw new Error("Missing return statement in function");
  }

  final public void parseEntityTypeDefQuery() throws ParseException {String entityTypeName, attrDefList="";
startTime=System.nanoTime();
    jj_consume_token(ETDCMD);
    entityTypeName = parseEntityTypeName();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      attrDefList = parseAttrDefList();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
System.out.println("Encountered: define entity-type " + entityTypeName + " (" + attrDefList + ")");
                //startTime=System.nanoTime();
                NVQLEntityType etDef = new NVQLEntityType(entityTypeName, attrDefList, con);
                endTime=System.nanoTime();
                timeobj.displayTime(startTime,endTime);
  }

  final public void parseCreateEntityQuery() throws ParseException {String entityTypeName, attrValList="";
startTime=System.nanoTime();
    jj_consume_token(CECMD);
    entityTypeName = parseEntityTypeName();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      attrValList = parseAttrValList();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
System.out.println("Encountered: create entity " + entityTypeName + " (" + attrValList + ")");
                //Next Line is meant for start calculating the entire time that the query
                //startTime=System.nanoTime();
                NVQLEntity e = new NVQLEntity(entityTypeName, attrValList, con);
                //Next part is meant for stop calculating the entire time that the query
                endTime=System.nanoTime();
                timeobj.displayTime(startTime,endTime);
  }

  final public void parseRelationTypeDefQuery() throws ParseException {String relationTypeName, attrDefList="", srcEntityType, tgtEntityType, fromentity="", toentity="";
startTime=System.nanoTime();
    jj_consume_token(RTDCMD);
    relationTypeName = parseRelationTypeName();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      attrDefList = parseAttrDefList();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(BETWEEN);
    jj_consume_token(LBRACE);
    srcEntityType = parseEntityTypeNameList();
    jj_consume_token(RBRACE);
    jj_consume_token(COMMA);
    jj_consume_token(LBRACE);
    tgtEntityType = parseEntityTypeNameList();
    jj_consume_token(RBRACE);
System.out.println("Encountered: define relation-type " + relationTypeName + " (" + attrDefList + ") between {"+srcEntityType+"}, {"+tgtEntityType+"}");
                //Next Line is meant for start calculating the entire time that the query
                //startTime=System.nanoTime();
                NVQLRelationType etDef = new NVQLRelationType(relationTypeName, attrDefList, srcEntityType, tgtEntityType, con);
                //Next part is meant for stop calculating the entire time that the query
                endTime=System.nanoTime();
                timeobj.displayTime(startTime,endTime);
  }

  final public void parseCreateRelationQuery() throws ParseException {String vt1, vt2;
        ArrayList<String> pred1, pred2;
        String rName;
        String relationAttrValList = "";
startTime=System.nanoTime();
    jj_consume_token(CRCMD);
    vt1 = parseVarType();
    pred1 = parseValPredicate();
    rName = parseRelationTypeName();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      relationAttrValList = parseAttrValList();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    vt2 = parseVarType();
    pred2 = parseValPredicate();
System.out.println("Encountered: create relation " + vt1 + " (" + pred1.get(0) + "."
                + pred1.get(1) + pred1.get(2) +pred1.get(3) + ") " + rName + " (" + relationAttrValList + ") " + vt2 + " (" + pred2.get(0) + "."
                + pred2.get(1) + pred2.get(2) +pred2.get(3) + ")");
                //Next Line is meant for start calculating the entire time that the query
                //startTime=System.nanoTime();
                NVQLRelation.createRelation(vt1, pred1, rName, relationAttrValList, vt2, pred2, con);
                //Next part is meant for stop calculating the entire time that the query
                endTime=System.nanoTime();
                timeobj.displayTime(startTime,endTime);
  }

  final public void parseUCDefQuery() throws ParseException {String entityType, attrList = "";
startTime=System.nanoTime();
    jj_consume_token(UCDCMD);
    entityType = parseEntityTypeName();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      attrList = parseIdList();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
System.out.println("Encountered: define unique " + entityType + " (" + attrList + ")");
                //startTime=System.nanoTime();
                NVQLUCDef ucDef = new NVQLUCDef(entityType, attrList, con);
                endTime=System.nanoTime();
                timeobj.displayTime(startTime,endTime);
  }

  final public void parseCCDefQuery() throws ParseException {String relationType;
        Token num1,num2;
        int n1,n2;
startTime=System.nanoTime();
    jj_consume_token(CCDCMD);
    relationType = parseRelationTypeName();
    num1 = numOfEntity();
    jj_consume_token(COLON);
    num2 = numOfEntity();
System.out.println("Encountered: define cardinality " + relationType + " " + num1.image+ ":" + num2.image);
                //startTime=System.nanoTime();
                if(num1.image.equals("n")||num1.image.equals("N"))
                        n1=Integer.MAX_VALUE;
                else
                        n1=Integer.parseInt(num1.image);

                if (num2.image.equals("n")||num2.image.equals("N"))
                        n2=Integer.MAX_VALUE;
                else
                        n2=Integer.parseInt(num2.image);

                NVQLCCDef.CardinalityConstraintDef(relationType, n1, n2, con);
                endTime=System.nanoTime();
                timeobj.displayTime(startTime,endTime);
  }

  final public void parseDropQuery() throws ParseException {String dropSyntax = "";
        String nameList = "";
        Token defi;
startTime=System.nanoTime();
    jj_consume_token(DROP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ET:{
      defi = jj_consume_token(ET);
      jj_consume_token(LPAREN);
      nameList = parseIdList();
      jj_consume_token(RPAREN);
      break;
      }
    case RT:{
      defi = jj_consume_token(RT);
      jj_consume_token(LPAREN);
      nameList = parseIdList();
      jj_consume_token(RPAREN);
      break;
      }
    case SCT:{
      defi = jj_consume_token(SCT);
      jj_consume_token(LPAREN);
      nameList = parseIdList();
      jj_consume_token(RPAREN);
      break;
      }
    case EXT:{
      defi = jj_consume_token(EXT);
      jj_consume_token(LPAREN);
      nameList = parseIdList();
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
dropSyntax = defi.image + " (" + nameList + ")";
                System.out.println("Encountered: " + "drop " + dropSyntax);
                //startTime=System.nanoTime();
                NVQLDrop agDrop = new NVQLDrop(dropSyntax, con);
                endTime=System.nanoTime();
                timeobj.displayTime(startTime,endTime);
  }

  final public String parseVarType() throws ParseException {Token var, type;
    var = jj_consume_token(ID);
    jj_consume_token(COLON);
    type = jj_consume_token(ID);
{if ("" != null) return (var.image + ":" + type.image);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<String> parseRelPredicate() throws ParseException {Token var1, var2;
        String entityType1, entityType2, relationType;
    jj_consume_token(LPAREN);
    var1 = jj_consume_token(ID);
    jj_consume_token(COLON);
    entityType1 = parseEntityTypeName();
    relationType = parseRelationTypeName();
    var2 = jj_consume_token(ID);
    jj_consume_token(COLON);
    entityType2 = parseEntityTypeName();
    jj_consume_token(RPAREN);
ArrayList<String> obj = new ArrayList<String>();
                obj.add(var1.image);//variable name
                obj.add(entityType1); //entityType name
                obj.add(relationType);//relationType name
                obj.add(var2.image);//variable name
                obj.add(entityType2); //entityType name

                {if ("" != null) return obj;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<String> parseValPredicate() throws ParseException {Token var, attr, relop, val;
    jj_consume_token(LPAREN);
    var = jj_consume_token(ID);
    jj_consume_token(DOT);
    attr = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUALS:{
      relop = jj_consume_token(EQUALS);
      break;
      }
    case NOTEQUAL:{
      relop = jj_consume_token(NOTEQUAL);
      break;
      }
    case LT:{
      relop = jj_consume_token(LT);
      break;
      }
    case LTE:{
      relop = jj_consume_token(LTE);
      break;
      }
    case GT:{
      relop = jj_consume_token(GT);
      break;
      }
    case GTE:{
      relop = jj_consume_token(GTE);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QUOTED_STRING:{
      val = jj_consume_token(QUOTED_STRING);
      break;
      }
    case NUMBER:{
      val = jj_consume_token(NUMBER);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
ArrayList<String> obj = new ArrayList<String>();
                obj.add(var.image);//variable name
                obj.add(attr.image); //attribute name
                obj.add(relop.image); //relational operator
                obj.add(val.image); // value

                {if ("" != null) return obj;}
    throw new Error("Missing return statement in function");
  }

  final public void parseDeleteQuery() throws ParseException {String deleteSyntax="";
        String vt;
        ArrayList<String> pred;
startTime=System.nanoTime();
    jj_consume_token(DELETE);
    vt = parseVarType();
    jj_consume_token(WHERE);
    pred = parseValPredicate();
deleteSyntax = vt + " where (" +pred.get(0)+"."+pred.get(1)+pred.get(2)+pred.get(3)+")";
                System.out.println("Encountered: " + "delete " + deleteSyntax);
                //startTime=System.nanoTime();
                NVQLDelete.delete(vt, pred, con);
                endTime=System.nanoTime();
                timeobj.displayTime(startTime,endTime);
  }

  final public void parseSelectQuery() throws ParseException {String selectSyntax="";
        String vt;
        Token oper=null;
        ArrayList<String> pred;
        ArrayList<String> relop = new ArrayList<String>();
        ArrayList<ArrayList<String>> selectpred = new ArrayList<ArrayList<String>>();
startTime=System.nanoTime();
    jj_consume_token(SELECT);
    vt = parseVarType();
    jj_consume_token(WHERE);
    if (jj_2_1(3)) {
      pred = parseValPredicate();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        pred = parseRelPredicate();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
selectpred.add(pred);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        oper = jj_consume_token(AND);
        break;
        }
      case OR:{
        oper = jj_consume_token(OR);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_2(3)) {
        pred = parseValPredicate();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          pred = parseRelPredicate();
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
relop.add(oper.image);
                selectpred.add(pred);
    }
selectSyntax = vt + " where";
                selectSyntax = NVQLSelect.querydisplay(selectSyntax , selectpred, relop);
                System.out.println("Encountered: " + "select " + selectSyntax);
                //startTime=System.nanoTime();
                NVQLSelect.select(vt, selectpred, relop, con);
                endTime=System.nanoTime();
                timeobj.displayTime(startTime,endTime);
  }

  final public void parseSecCondDefQuery() throws ParseException {String secCondTypeName,relationTypeName,EntityTypeName;
        String attrDefList="", SecCondDefSyntax="";
        ArrayList<String> relationTypeNameList = new ArrayList<String>();
        ArrayList<String> EntityTypeNameList = new ArrayList<String>();
startTime=System.nanoTime();
    jj_consume_token(SCDCMD);
    secCondTypeName = parseSecCondTypeName();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      attrDefList = parseAttrDefList();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    relationTypeName = parseRelationTypeName();
    jj_consume_token(LBRACE);
    EntityTypeName = parseEntityTypeNameList();
    jj_consume_token(RBRACE);
relationTypeNameList.add(relationTypeName);
             EntityTypeNameList.add(EntityTypeName);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
      relationTypeName = parseRelationTypeName();
      jj_consume_token(LBRACE);
      EntityTypeName = parseEntityTypeNameList();
      jj_consume_token(RBRACE);
relationTypeNameList.add(relationTypeName);
             EntityTypeNameList.add(EntityTypeName);
    }
SecCondDefSyntax = NVQLSecCondType.querydisplay(relationTypeNameList, EntityTypeNameList) ;
        System.out.println("Encountered: define security-condition-type "+ secCondTypeName + " (" +attrDefList +") "+SecCondDefSyntax);
        //startTime=System.nanoTime();
        NVQLSecCondType.createSecCondType(secCondTypeName, attrDefList, relationTypeNameList, EntityTypeNameList, con);
        endTime=System.nanoTime();
        timeobj.displayTime(startTime,endTime);
  }

  final public void parseSecCondCreateQuery() throws ParseException {Token secCondName;
        String relationTypeName,vt;
        ArrayList<String> pred;
        ArrayList<String> relationTypeNameList = new ArrayList<String>();
        ArrayList<String> relationCond = new ArrayList<String>();
        ArrayList<ArrayList<String>> EntityRelCondList = new ArrayList<ArrayList<String>>();
        String SecCondSyntax="",attrValList = "";
startTime=System.nanoTime();
    jj_consume_token(CSECCMD);
    secCondName = jj_consume_token(ID);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      attrValList = parseAttrValList();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    relationTypeName = parseRelationTypeName();
    jj_consume_token(LBRACE);
    vt = parseVarType();
    pred = parseValPredicate();
    jj_consume_token(RBRACE);
relationTypeNameList.add(relationTypeName);
             relationCond.add(vt);
             EntityRelCondList.add(pred);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_8;
      }
      relationTypeName = parseRelationTypeName();
      jj_consume_token(LBRACE);
      vt = parseVarType();
      pred = parseValPredicate();
      jj_consume_token(RBRACE);
relationTypeNameList.add(relationTypeName);
             relationCond.add(vt);
             EntityRelCondList.add(pred);
    }
SecCondSyntax = NVQLSecCond.querydisplay(relationTypeNameList, relationCond, EntityRelCondList) ;
        System.out.println("Encountered: create security-condition "+ secCondName.image + " (" +attrValList +")"+SecCondSyntax);
        //startTime=System.nanoTime();
        NVQLSecCond.createSecCond(secCondName.image, attrValList, relationTypeNameList, relationCond, EntityRelCondList, con);
        endTime=System.nanoTime();
        timeobj.displayTime(startTime,endTime);
  }

  final public ArrayList<String> parseConditionList() throws ParseException {Token rtname = null, lparen = null, rparen = null;
        String rtnameList = "", attrValList = "" ;
        ArrayList<String> SecCondList = new ArrayList<String>();
    rtname = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      lparen = jj_consume_token(LPAREN);
      attrValList = parseAttrValList();
      rparen = jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
if(lparen!=null && rparen!=null)
               rtnameList = rtnameList + rtname.image + lparen.image + attrValList + rparen.image;
               else
               rtnameList = rtnameList + rtname.image ;
               SecCondList.add(rtnameList);
               rtnameList="";
               lparen=null; rparen=null; attrValList="";
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      rtname = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        lparen = jj_consume_token(LPAREN);
        attrValList = parseAttrValList();
        rparen = jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
if(lparen!=null && rparen!=null)
                rtnameList = rtnameList + rtname.image + lparen.image + attrValList + rparen.image;
                else
                rtnameList = rtnameList + rtname.image ;
                SecCondList.add(rtnameList);
                rtnameList="";
                lparen=null; rparen=null;attrValList="";
    }
{if ("" != null) return SecCondList;}
    throw new Error("Missing return statement in function");
  }

  final public void parseExpDefQuery() throws ParseException {String expTypeName, attrDefList="";
        ArrayList<String> preCond,postCond;
        Token cveVal;
startTime=System.nanoTime();
    jj_consume_token(EXDCMD);
    expTypeName = parseExploitTypeName();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      attrDefList = parseAttrDefList();
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(CVE);
    jj_consume_token(LPAREN);
    cveVal = jj_consume_token(QUOTED_STRING);
    jj_consume_token(RPAREN);
    jj_consume_token(PRECOND);
    jj_consume_token(LBRACE);
    preCond = parseConditionList();
    jj_consume_token(RBRACE);
    jj_consume_token(POSTCOND);
    jj_consume_token(LBRACE);
    postCond = parseConditionList();
    jj_consume_token(RBRACE);
//SecCondDefSyntax = NVQLSecCond.querydisplay(SecCondDefSyntax, relationTypeNameList, EntityTypeNameList) ;
        System.out.println("Encountered: define exploit-type "+ expTypeName + " (" +attrDefList +") CVE (" + cveVal.image + ")\u005cn\u005ct precond {"+NVQLExploitType.PreCondDisp(preCond)+"}\u005cn\u005ct postcond {"+NVQLExploitType.PostCondDisp(postCond)+"}");
        //startTime=System.nanoTime();
        NVQLExploitType.createExploitType(expTypeName, attrDefList, preCond, postCond, cveVal.image, con);
        endTime=System.nanoTime();
        timeobj.displayTime(startTime,endTime);
  }

  final public void parseExpQuery() throws ParseException {Token expTypeName;
        String attrValList="",preCond ="",postCond="",vt;
        ArrayList<String> pred;
        ArrayList<String> securityCond = new ArrayList<String>();
        ArrayList<ArrayList<String>> EntityRelCondList = new ArrayList<ArrayList<String>>();
        ArrayList<String> securityCond1 = new ArrayList<String>();
        ArrayList<ArrayList<String>> EntityRelCondList1 = new ArrayList<ArrayList<String>>();
startTime=System.nanoTime();
    jj_consume_token(CEXPCMD);
    expTypeName = jj_consume_token(ID);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      attrValList = parseAttrValList();
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(PRECOND);
    jj_consume_token(LBRACE);
    vt = parseVarType();
    pred = parseValPredicate();
securityCond.add(vt);
             EntityRelCondList.add(pred);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      vt = parseVarType();
      pred = parseValPredicate();
securityCond.add(vt);
             EntityRelCondList.add(pred);
    }
    jj_consume_token(RBRACE);
    jj_consume_token(POSTCOND);
    jj_consume_token(LBRACE);
    vt = parseVarType();
    pred = parseValPredicate();
securityCond1.add(vt);
             EntityRelCondList1.add(pred);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      vt = parseVarType();
      pred = parseValPredicate();
securityCond1.add(vt);
             EntityRelCondList1.add(pred);
    }
    jj_consume_token(RBRACE);
System.out.println("Encountered: create exploit "+ expTypeName.image + " (" +attrValList +") ");
                preCond = NVQLExploit.preConddisplay(securityCond,EntityRelCondList);
                postCond = NVQLExploit.postConddisplay(securityCond1,EntityRelCondList1);
                System.out.println("\u005ctprecond {"+preCond+"}");
                System.out.println("\u005ctpostcond {"+postCond+"}");
                NVQLExploit.createExploit(expTypeName.image, attrValList, securityCond, EntityRelCondList, securityCond1, EntityRelCondList1, con);
                endTime=System.nanoTime();
                timeobj.displayTime(startTime,endTime);
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public NVQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc07ff0,0xc07ff0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x2000,0x4,0x12000,0x4,0x4,0x4,0x8000,0x8000,0x8000,0x8000,0x8000,0x0,0x7e0,0x12000,0x1,0x1800,0x1800,0x1,0x8000,0x8000,0x8000,0x8000,0x1,0x4,0x1,0x8000,0x8000,0x4,0x4,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public NVQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NVQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NVQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public NVQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NVQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public NVQLParser(NVQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(NVQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
