/* NVQLParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. NVQLParserTokenManager.java */
//import statements

import java.io.*;
import java.net.*;
import java.nio.*;
import java.sql.*;
import java.util.*;
import java.lang.*;
import javafx.util.Pair;
import java.util.Properties;

/** Token Manager. */
@SuppressWarnings("unused")public class NVQLParserTokenManager implements NVQLParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 40:
         jjmatchedKind = 32;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 33;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 34;
         return jjMoveNfa_0(0, 0);
      case 46:
         jjmatchedKind = 36;
         return jjMoveNfa_0(0, 0);
      case 58:
         jjmatchedKind = 35;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 62:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x20003c00L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0xc003f0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x9000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 78:
         jjmatchedKind = 28;
         return jjMoveNfa_0(0, 0);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x100000080000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x30000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x4004000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20003c00L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xc003f0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x9000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 110:
         jjmatchedKind = 28;
         return jjMoveNfa_0(0, 0);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x100000080000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x30000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4004000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 123:
         jjmatchedKind = 30;
         return jjMoveNfa_0(0, 0);
      case 125:
         jjmatchedKind = 31;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x640c3f0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 78:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80001000000L);
      case 79:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 82:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x913c00L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x640c3f0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80001000000L);
      case 111:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x913c00L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 68:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         break;
      case 69:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x53c00L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x3f0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x2404000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x900000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x1008000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         break;
      case 101:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x53c00L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x3f0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2404000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x900000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x1008000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x2003c00L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x404000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x10003f0L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 77:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 3;
         }
         break;
      case 80:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 87:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2003c00L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x404000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10003f0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 109:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 3;
         }
         break;
      case 112:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
         }
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x24000L);
      case 69:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x3f0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x8010000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x3403c00L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x24000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x3f0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8010000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x3403c00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0xbff0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0xe000000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 84:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 5;
         }
         break;
      case 89:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0xbff0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0xe000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 5;
         }
         break;
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x3ff0L);
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 68:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 6;
         }
         break;
      case 78:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0xc000000L);
      case 100:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 6;
         }
         break;
      case 110:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0xc000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 68:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 7;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x2490L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x820L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0x1040L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L);
      case 89:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 100:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 7;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x2490L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x820L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x1040L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L);
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x6000000L);
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x1860L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x510L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 88:
         return jjMoveStringLiteralDfa9_0(active0, 0x2080L);
      case 89:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x1860L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x510L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0x2080L);
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0x4001040L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x100L);
      case 76:
         return jjMoveStringLiteralDfa10_0(active0, 0x820L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0x1002080L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000410L);
      case 89:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x4001040L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x820L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x1002080L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000410L);
      case 121:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x820L);
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x200L);
      case 69:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 10;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x410L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x2080L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      case 80:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
      case 81:
         return jjMoveStringLiteralDfa11_0(active0, 0x100L);
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0x1040L);
      case 89:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x820L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x200L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 10;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x410L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x2080L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
      case 113:
         return jjMoveStringLiteralDfa11_0(active0, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x1040L);
      case 121:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 11;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x200L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0x2080L);
      case 80:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x1040L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active0, 0xc30L);
      case 85:
         return jjMoveStringLiteralDfa12_0(active0, 0x100L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 11;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x2080L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x1040L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0xc30L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x100L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L);
      case 69:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 12;
         }
         else if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 12;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0x38e0L);
      case 78:
         return jjMoveStringLiteralDfa13_0(active0, 0x200L);
      case 89:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x10L);
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L);
      case 101:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 12;
         }
         else if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 12;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x38e0L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x200L);
      case 121:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x10L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0x10L);
      case 65:
         return jjMoveStringLiteralDfa14_0(active0, 0x200L);
      case 73:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000L);
      case 79:
         return jjMoveStringLiteralDfa14_0(active0, 0x820L);
      case 84:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x10c0L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x820L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x10c0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 13);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa15_0(active0, 0x80L);
      case 76:
         return jjMoveStringLiteralDfa15_0(active0, 0x200L);
      case 78:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0x20L);
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000010L);
      case 89:
         return jjMoveStringLiteralDfa15_0(active0, 0x1040L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0x200L);
      case 110:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0x20L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000010L);
      case 121:
         return jjMoveStringLiteralDfa15_0(active0, 0x1040L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 14);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 14);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa16_0(active0, 0x1060L);
      case 73:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000200L);
      case 84:
         return jjMoveStringLiteralDfa16_0(active0, 0x80L);
      case 89:
         return jjMoveStringLiteralDfa16_0(active0, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000200L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x80L);
      case 121:
         return jjMoveStringLiteralDfa16_0(active0, 0x10L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 15);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 15);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa17_0(active0, 0x1040L);
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000L);
      case 80:
         return jjMoveStringLiteralDfa17_0(active0, 0x10L);
      case 84:
         return jjMoveStringLiteralDfa17_0(active0, 0x220L);
      case 89:
         return jjMoveStringLiteralDfa17_0(active0, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x1040L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa17_0(active0, 0x10L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x220L);
      case 121:
         return jjMoveStringLiteralDfa17_0(active0, 0x80L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 16);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 16);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 17;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000L);
      case 79:
         return jjMoveStringLiteralDfa18_0(active0, 0x1040L);
      case 80:
         return jjMoveStringLiteralDfa18_0(active0, 0x80L);
      case 89:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 17;
         }
         return jjMoveStringLiteralDfa18_0(active0, 0x20L);
      case 101:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 17;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x1040L);
      case 112:
         return jjMoveStringLiteralDfa18_0(active0, 0x80L);
      case 121:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 17;
         }
         return jjMoveStringLiteralDfa18_0(active0, 0x20L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 17);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 17);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000000L);
      case 69:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 18;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa19_0(active0, 0x1040L);
      case 80:
         return jjMoveStringLiteralDfa19_0(active0, 0x20L);
      case 101:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 18;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa19_0(active0, 0x1040L);
      case 112:
         return jjMoveStringLiteralDfa19_0(active0, 0x20L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 18);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 18);
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa20_0(active0, 0x1040L);
      case 69:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 19;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000000L);
      case 100:
         return jjMoveStringLiteralDfa20_0(active0, 0x1040L);
      case 101:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 19;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 19);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 19);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 19);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa21_0(active0, 0x1040L);
      case 89:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x1040L);
      case 121:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 20);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 20);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 20);
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa22_0(active0, 0x4000000L);
      case 84:
         return jjMoveStringLiteralDfa22_0(active0, 0x1040L);
      case 112:
         return jjMoveStringLiteralDfa22_0(active0, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa22_0(active0, 0x1040L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 21);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 21);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 21);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 22;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa23_0(active0, 0x1040L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 22;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa23_0(active0, 0x1040L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 22);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 22);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 22);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa24_0(active0, 0x1040L);
      case 111:
         return jjMoveStringLiteralDfa24_0(active0, 0x1040L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 23);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 23);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 23);
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 24;
         }
         return jjMoveStringLiteralDfa25_0(active0, 0x40L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 24;
         }
         return jjMoveStringLiteralDfa25_0(active0, 0x40L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 24);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 24);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 24);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa26_0(active0, 0x40L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 25);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 25);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 25);
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa27_0(active0, 0x40L);
      case 116:
         return jjMoveStringLiteralDfa27_0(active0, 0x40L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 26);
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 26);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 26);
   }
   switch(curChar)
   {
      case 89:
         return jjMoveStringLiteralDfa28_0(active0, 0x40L);
      case 121:
         return jjMoveStringLiteralDfa28_0(active0, 0x40L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 27);
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 27);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 27);
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa29_0(active0, 0x40L);
      case 112:
         return jjMoveStringLiteralDfa29_0(active0, 0x40L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 28);
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 28);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 28);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 29;
         }
         break;
      case 101:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 29;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 29);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 32;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAdd(3); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 47)
                     { jjAddStates(0, 1); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(20, 21); }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAdd(3); }
                  break;
               case 18:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 19:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 20:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 21:
                  if (curChar == 34 && kind > 48)
                     kind = 48;
                  break;
               case 22:
                  if (curChar == 47)
                     { jjAddStates(0, 1); }
                  break;
               case 23:
                  if (curChar != 47)
                     break;
                  if (kind > 2)
                     kind = 2;
                  { jjCheckNAddStates(2, 4); }
                  break;
               case 24:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  { jjCheckNAddStates(2, 4); }
                  break;
               case 25:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 26:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 27:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 29:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 30:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if (curChar == 47 && kind > 3)
                     kind = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     { jjCheckNAdd(18); }
                  }
                  else if (curChar == 92)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 4:
                  if (curChar == 103 && kind > 46)
                     kind = 46;
                  break;
               case 5:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 116 && kind > 46)
                     kind = 46;
                  break;
               case 11:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 101 && kind > 46)
                     kind = 46;
                  break;
               case 14:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAdd(18); }
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAdd(18); }
                  break;
               case 20:
                  { jjAddStates(5, 6); }
                  break;
               case 24:
                  if (kind > 2)
                     kind = 2;
                  { jjAddStates(2, 4); }
                  break;
               case 29:
                  { jjAddStates(7, 8); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(5, 6); }
                  break;
               case 24:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  { jjAddStates(2, 4); }
                  break;
               case 29:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(7, 8); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 32 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   23, 28, 24, 25, 27, 20, 21, 29, 30, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\173", "\175", "\50", "\51", "\54", "\72", "\56", "\75\75", 
"\41\75", "\74", "\74\75", "\76", "\76\75", null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public NVQLParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public NVQLParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 32; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1fffffffffff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[32];
    private final int[] jjstateSet = new int[2 * 32];

    
    protected char curChar;
}
